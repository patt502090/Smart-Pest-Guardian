"""Streamlit dashboard for showcasing detection and forecasting results."""
from __future__ import annotations

from pathlib import Path

import pandas as pd
import streamlit as st

DEFAULT_DETECTIONS = Path("results/detections/detections.csv")
DEFAULT_FORECAST = Path("results/forecasting/forecast.csv")


def load_csv(path: Path) -> pd.DataFrame:
    if not path.exists():
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {path}")
        return pd.DataFrame()
    return pd.read_csv(path)


def main() -> None:
    st.set_page_config(page_title="Smart Pest Guardian", layout="wide")
    st.title("üì∏ Smart Pest Guardian Dashboard")

    st.sidebar.header("Dataset Selection")
    detections_path = Path(st.sidebar.text_input("‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", value=str(DEFAULT_DETECTIONS)))
    forecast_path = Path(st.sidebar.text_input("‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", value=str(DEFAULT_FORECAST)))

    detections_df = load_csv(detections_path)
    forecast_df = load_csv(forecast_path)

    tab1, tab2, tab3 = st.tabs(["‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡πà‡∏ß‡∏°"])

    with tab1:
        st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏£‡∏∏‡∏õ")
        if not detections_df.empty:
            st.write(detections_df.head())
            agg = detections_df.groupby("class_id").agg(
                detections=("confidence", "count"),
                avg_confidence=("confidence", "mean"),
            )
            st.bar_chart(agg["detections"])
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô")

    with tab2:
        st.subheader("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î")
        if not forecast_df.empty:
            st.write(forecast_df.head())
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

    with tab3:
        if not detections_df.empty and not forecast_df.empty:
            st.subheader("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
            st.write("‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
        else:
            st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡πà‡∏ß‡∏°")


if __name__ == "__main__":
    main()
